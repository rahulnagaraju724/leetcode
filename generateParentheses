class Solution {
    public List<String> generateParenthesis(int n) {
        //22. Generate Parentheses
        List<String> resultList=new ArrayList<>();
        Stack<String> stack=new Stack<>();
        backtrackParenthesis(n,0,0,resultList,stack);

        return resultList;
        
    }

    public void backtrackParenthesis(int n, int open, int closed,List<String> resultList, Stack<String> stack){
        if(open == n && closed == n){
            StringBuilder concatenatedString = new StringBuilder();
            for (String str : stack) {
                concatenatedString.append(str);
            }

            String result = concatenatedString.toString();
            resultList.add(result);
            return;
        }

        if(open<n){
            stack.push("(");
            backtrackParenthesis(n,open+1,closed,resultList,stack);
            stack.pop();
        }
        if(closed<open){
            stack.push(")");
            backtrackParenthesis(n,open,closed+1,resultList,stack);
            stack.pop();
        }



    }
}